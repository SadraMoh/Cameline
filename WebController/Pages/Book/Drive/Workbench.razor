@inject CameraService camSv
@inject AlertService alertSv

<div class="workbench">

    <div class="bar fh">

        <div class="drop-parent">
            <button class="control">
                <span class="material-symbols-sharp">crop</span>
            </button>
            <drop mode="hover" direction="top">
                <div class="card col">
                    <div class="fg">
                        <label>Offset X</label>
                        <div class="fh">
                            <div class="control">
                                <input class="invisibox" style="width: 6ch" type="text" @bind="cropX" />
                            </div>
                            <div class="control">
                                <input class="range" step="1" min="0" max="100" type="range" @bind="cropX" @bind:event="oninput" />
                            </div>
                        </div>
                    </div>
                    <div class="fg">
                        <label>Offset Y</label>
                        <div class="fh">
                            <div class="control">
                                <input class="invisibox" style="width: 6ch" type="text" @bind="cropY" />
                            </div>
                            <div class="control">
                                <input class="range" step="1" min="0" max="100" type="range" @bind="cropY" @bind:event="oninput" />
                            </div>
                        </div>
                    </div>
                    <div class="fg">
                        <label>Width</label>
                        <div class="fh">
                            <div class="control">
                                <input class="invisibox" style="width: 6ch" type="text" @bind="cropWidth" />
                            </div>
                            <div class="control">
                                <input class="range" step="1" min="10" max="100" type="range" @bind="cropWidth" @bind:event="oninput" />
                            </div>
                        </div>
                    </div>
                    <div class="fg">
                        <label>Height</label>
                        <div class="fh">
                            <div class="control">
                                <input class="invisibox" style="width: 6ch" type="text" @bind="cropHeight" />
                            </div>
                            <div class="control">
                                <input class="range" step="1" min="10" max="100" type="range" @bind="cropHeight" @bind:event="oninput" />
                            </div>
                        </div>
                    </div>
                </div>
            </drop>
        </div>

        <div class="drop-parent">
            <button class="control">
                <span class="material-symbols-sharp">autorenew</span>
            </button>
            <drop mode="hover" direction="top">
                <div class="card col">
                    <div class="fg">
                        <label>Rotation</label>
                        <div class="fh">
                            <div class="control">
                                <input class="invisibox" style="width: 7ch" type="text" @bind="cropRotation" />
                            </div>
                            <div class="control">
                                <input class="range" step="0.2" min="-45" max="45" type="range" @bind="cropRotation" @bind:event="oninput" />
                            </div>
                        </div>
                    </div>
                    <div class="fg">
                        <label class="checkbox">
                            <input type="checkbox" value="" @bind="cropFlip" />
                            <span class="text">
                                Flip
                            </span>
                        </label>
                    </div>
                </div>
            </drop>
        </div>

        <div class="drop-parent">
            <button class="control">
                <span class="material-symbols-sharp">search</span>
            </button>
            <drop mode="hover" direction="top">
                <div class="card col">
                    <div class="fg">
                        <label>Zoom</label>
                        <div class="fh">
                            <button class="control">
                                <span class="material-symbols-sharp">zoom_in</span>
                            </button>
                            <button class="control">
                                <span class="material-symbols-sharp">zoom_out</span>
                            </button>
                        </div>
                    </div>
                </div>
            </drop>
        </div>

        <div class="drop-parent">
            <button class="control">
                <span class="material-symbols-sharp">photo_camera</span>
            </button>
            <drop mode="hover" direction="right">
                <div class="card col" style="min-width: 300px">
                    <div class="fg">
                        <label>Camera</label>
                        <div class="fh">
                            <select class="control combo" @onchange="on_selectedCamChange">
                                <option value="">None</option>
                                @foreach (var cam in camSv.Cameras)
                                {
                                    <option selected="@(Cam?.ID == cam.ID)" value="@cam.ID">@cam.DeviceName</option>
                                }
                            </select>
                        </div>
                    </div>
                    @if (Cam != null)
                    {
                        <hr />
                        <div class="row gap-m">
                            <div class="fg flex-1">
                                <label>Av</label>
                                <div class="fh">
                                    <select class="control combo" @onchange="on_avChange">
                                        @foreach (var av in AvList)
                                        {
                                            <option selected="@(CamAv == av.IntValue)" value="@av.IntValue">@av.StringValue</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="fg flex-1">
                                <label>Tv</label>
                                <div class="fh">
                                    <select class="control combo" @onchange="on_tvChange">
                                        @foreach (var tv in TvList)
                                        {
                                            <option value="@(tv.IntValue)">@tv.StringValue</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="row gap-m">
                            <div class="fg flex-1">
                                <label>ISO</label>
                                <div class="fh">
                                    <select class="control combo" @onchange="on_isoChange">
                                        @foreach (var iso in ISOList)
                                        {
                                            <option value="@(iso.IntValue)">@iso.StringValue</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="flex-1"></div>
                        </div>
                        <hr />
                    }
                    @if (UseBulb)
                    {
                        <div class="fg flex-1">
                            <label>Bulb</label>
                            <div class="fh">
                                <div class="control">
                                    <input class="invisibox" disabled="@(!UseBulb)" style="width: 9ch" type="text" @bind="Bulb" />
                                </div>
                                <div class="control flex-1">
                                    <input class="range" disabled="@(!UseBulb)" step="1" min="0" max="100000" type="range" @bind="Bulb" @bind:event="oninput" />
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </drop>
        </div>

    </div>

    <div class="panel pos-relative">
        <div class="cropper-container">
            <div class="cropper" style="width: @(cropWidth + "%"); height: @(cropHeight + "%"); left: @(cropX + "%"); top: @(cropY + "%"); transform: rotate(@(cropRotation + "deg"))">
                <div class="cropper-info">
                    <span>@(cropWidth)% : @(cropHeight)% .@(cropRotation)º</span>
                </div>
                @*<div class="handlebars-grid">
                <div class="corner" style="top: -5px; left: -5px; cursor: nw-resize;" onmousedown="cropper(this, 'tlDown')'"></div>
                <div class="handlebar" style="left: -5px; right: -5px; top: -5px; cursor: n-resize;" onmousedown="cropper(this, 'topDown')">
                </div>
                <div class="corner" style="top: -5px; right: -5px; cursor: ne-resize;" onmousedown="cropper(this, 'trDown')"></div>
                <div class="handlebar" style="top: -5px; bottom: -5px; right: -5px; cursor: e-resize;"
                onmousedown="cropper(this, 'rightDown')"></div>
                <div class="center" onmousedown="cropper(this, 'centerDown')"></div>
                <div class="handlebar" style="left: -5px; right: -5px; bottom: -5px; cursor: s-resize;"
                onmousedown="cropper(this, 'bottomDown')"></div>
                <div class="corner" style="bottom: -5px; right: -5px; cursor: se-resize" onmousedown="cropper(this, 'brDown')"></div>
                <div class="handlebar" style="top: -5px; bottom: -5px; left: -5px; cursor: w-resize;" onmousedown="cropper(this, 'leftDown')">
                </div>
                <div class="corner" style="bottom: -5px; left: -5px; cursor: sw-resize" onmousedown="cropper(this, 'blDown')"></div>
                </div>*@
            </div>
        </div>
        <video class="video" style="@(cropFlip ? "scaleX(-1)" : "")"></video>
    </div>

</div>

@code {

    /// <summary>
    /// Selected Camera
    /// </summary>
    public Camera? Cam { get; set; }

    public CameraValue[] AvList
    {
        get => Cam?.GetSettingsList(PropertyID.Av) ?? new CameraValue[0];
    }

    public CameraValue[] TvList
    {
        get => Cam?.GetSettingsList(PropertyID.Tv) ?? new CameraValue[0];
    }

    public CameraValue[] ISOList
    {
        get => Cam?.GetSettingsList(PropertyID.ISO) ?? new CameraValue[0];
    }

    public int? CamAv
    {
        get
        {
            if (Cam == null) return null;
            return AvValues.GetValue(Cam.GetInt32Setting(PropertyID.Av)).IntValue;
        }
    }

    public int? CamTv
    {
        get
        {
            if (Cam == null) return null;
            return TvValues.GetValue(Cam.GetInt32Setting(PropertyID.Tv)).IntValue;
        }
    }

    public int? CamISO
    {
        get
        {
            if (Cam == null) return null;
            return ISOValues.GetValue(Cam.GetInt32Setting(PropertyID.ISO)).IntValue;
        }
    }

    /// Percent
    private float _cropWidth = 50f;
    public float cropWidth
    {
        get => _cropWidth;
        set
        {
            if (value + this.cropX > 100) value = 100 - this.cropX;
            this._cropWidth = value;
        }
    }

    /// Percent
    private float _cropHeight = 50f;
    public float cropHeight
    {
        get => _cropHeight;
        set
        {
            if (value + this.cropY > 100) value = 100 - this.cropY;
            this._cropHeight = value;
        }
    }

    /// Degree
    public float cropRotation { get; set; } = 0f;

    public bool cropFlip { get; set; } = false;

    /// Percent
    private float _cropX = 25f;
    public float cropX
    {
        get => _cropX;
        set
        {
            if (this.cropWidth + value > 100) value = 100 - this.cropWidth;
            this._cropX = value;
        }
    }

    /// Percent
    private float _cropY = 25f;
    public float cropY
    {
        get => _cropY;
        set
        {
            if (this.cropHeight + value > 100) value = 100 - this.cropHeight;
            this._cropY = value;
        }
    }

    public int Bulb { get; set; }

    public bool UseBulb
    {
        get
        {
            if (!CamTv.HasValue) return false;
            var bulb = TvList.Where(tv => tv.StringValue == "Bulb").First();

            return CamTv == bulb.IntValue;
        }
    }

    void on_selectedCamChange(ChangeEventArgs? e)
    {
        if (e == null) return;
        if (e.Value == null) return;

        if (!long.TryParse((string)e.Value, out long newId))
        {
            if (this.Cam?.SessionOpen ?? false) this.Cam.CloseSession();

            this.Cam = null;
            return;
        }

        this.Cam = camSv.Cameras.Where(cam => cam.ID == newId).First();

        if (!this.Cam.SessionOpen) this.Cam.OpenSession();

    }

    void on_avChange(ChangeEventArgs? e)
    {
        if (e == null) return;
        if (e.Value == null) return;
        if (Cam == null) return;

        var newAv = int.Parse((string)e.Value);
        int oldAv = this.CamAv ?? 0;

        try
        {
            Cam.SetSetting(PropertyID.Av, AvValues.GetValue(newAv));
        }
        catch (Exception ex)
        {
            alertSv.Error(ex.Message);
            alertSv.Notify($"falling back to previous value {oldAv}");
            Cam.SetSetting(PropertyID.Av, AvValues.GetValue(oldAv));
        }

        StateHasChanged();
    }

    void on_tvChange(ChangeEventArgs? e)
    {
        if (e == null) return;
        if (e.Value == null) return;
        if (Cam == null) return;

        var newTv = int.Parse((string)e.Value);

        Cam.SetSetting(PropertyID.Tv, TvValues.GetValue(newTv));
    }

    void on_isoChange(ChangeEventArgs? e)
    {
        if (e == null) return;
        if (e.Value == null) return;
        if (Cam == null) return;

        var newISO = int.Parse((string)e.Value);

        Cam.SetSetting(PropertyID.ISO, ISOValues.GetValue(newISO));
    }
    }
