@inject CameraService camSv
@inject IJSRuntime js

<div class="camera">

    <h3>@Camera.DeviceName</h3>

    <dl>
        <dt>DeviceName</dt>
        <dd>@Camera.DeviceName</dd>

        <dt>ID</dt>
        <dd>@Camera.ID</dd>

        <dt>IsLiveViewOn</dt>
        <dd>@Camera.IsLiveViewOn</dd>

        <dt>IsRecordAvailable</dt>
        <dd>@Camera.IsRecordAvailable</dd>

        <dt>IsDisposed</dt>
        <dd>@Camera.IsDisposed</dd>

        <dt>Session Open</dt>
        <dd>@Camera.SessionOpen</dd>
    </dl>

    @if (!Camera.SessionOpen)
    {
        <button @onclick="() => camSv.OpenSession(Camera)">Create Session</button>
    }
    else
    {
        <button @onclick="() => camSv.CloseSession(Camera)">Close Session</button>
    }

    <button disabled="@(!Camera.SessionOpen)" @onclick="() => camSv.Capture(Camera)">Capture</button>

    <br />

    <h4>Live View</h4>

    <button disabled="@(!Camera.SessionOpen || Camera.IsLiveViewOn)" @onclick="() => camStartLiveView(Camera)">Start</button>
    <button disabled="@(!Camera.SessionOpen || !Camera.IsLiveViewOn)" @onclick="() => camStopLiveView(Camera)">Stop</button>

    <img id="imgLive" style="width: 450px; height: 300px;" width="450" height="300"/>

    <button @onclick="invoke">Invoke Js</button>

</div>

@code {

    [Parameter]
    public Camera Camera { get; set; }

    private IJSObjectReference? module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            module = await js.InvokeAsync<IJSObjectReference>("import", "./modules/CameraDiag.module.js");
    }

    async Task camStartLiveView(Camera cam)
    {
        await camSv.LiveView_Start(cam);
        await InvokeAsync(StateHasChanged);
    }

    async Task camStopLiveView(Camera cam)
    {
        await camSv.LiveView_Stop(cam);
        await InvokeAsync(StateHasChanged);
    }

    protected override Task OnParametersSetAsync()
    {
        Console.WriteLine("sync " + Camera.DeviceName);

        Camera.LiveViewUpdated += Camera_LiveViewUpdated;

        return base.OnParametersSetAsync();
    }

    private void Camera_LiveViewUpdated(Camera sender, Stream img)
    {
        module?.InvokeVoidAsync("receiveLiveImage");
    }

    private void invoke()
    {
        module?.InvokeVoidAsync("showPrompt");
    }

}
